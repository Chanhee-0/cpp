#include <iostream>
#include <string>
#include <list>
#include <vector>
#include <array>
#include <deque>
#include <queue>
#include <set>
#include <map>
#include <stack>
#include <algorithm>

using namespace std;

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	
	vector<int, int> v;
	v.push_back(make_pair(s, t)); -> 멀티맵은 되는데 멀티셋은 왜 안됨..
	
	int var = 0;
	
	isdigit(var); // 숫자인지 판단하는 함수 is digit


	string s; // string을 선언한다.

	s = "hello"; // string을 초기화한다.

	string s("hello"); // string을 초기화한다.

	s.assign("hello"); // string을 초기화한다.
	
	s.find('.'); // '.'이 있다면 string에서 1의 인덱스를 리턴한다.
	
	s.find(s.begin(), s.end(), '1'); // string에서 1의 인덱스를 리턴한다.
	
	s.erase(0, 3); // string에서 0에서 3까지 해당하는 부분을 지운다.
	
	s.erase(2, 4); // string[2]부터 4개를 지운다.

	s.clear(); // string 전체를 지운다.
	
	s.replace(0, 3, "aa"); // string에서 0에서 3까지 해당하는 부분 "aa"로 바꾼다.

	s.size(); // string의 사이즈 반환한다.
	
	var = stoi(s); // s 안의 문자열을 정수로 바꾼다. string to int 줄여서 s to i stoi다.
	
	var = var = stoul(s); // s 안의 문자열을 부호 없는 정수로 바꾼다.
	
	var = stof(s); // s 안의 문자열을 부동 소수점 값으로 바꾼다.
	
	int(s[i]) // string 안의 특정 원소(char 형태)를 숫자로 바꿀 경우에는 stoi가 사용 불가하다.
	
	to_string(var); // 숫자를 string으로 바꿀 때 사용된다.
	
	s.substr(0, 2); // 0에서 2개만큼 자른다.
	
	s.substr(2); // 앞에 2개를 빼고 마지막까지 반환
	
	s.substr(s.size() - 2); // 뒤에서 부터 2개 반환.
	
	toupper(s[i]); // 문자가 소문자인 경우 대문자로 바꿔준다. 아닐경우 그대로 반환
	
	tolower(s[i]); // 문자가 대문자인 경우 소문자로 바꿔준다. 아닐경우 그대로 반환
	
	_strupr_s(s, sizeof(s)); // string s 안을 s.size() 크기만큼 대문자로 변환한다. _strupr_s와 _strlwr_s은 cstring과 string.h 헤더파일을 추가해야한다.
	
	_strlwr_s(s, sizeof(s)); // string s 안을 s.size() 크기만큼 소문자로 변환한다. cstring으로 변환 과정을 거쳐야 하기에 잘사용하지 않는다.


	list<int> l; // list를 선언한다.
	
	list<int>::iterator iter; // list의 iter선언 iter을 통해 list의 반복자를 반환해 순환 할 때 사용한다.
	
	l.push_back(var); // list의 끝에 변수 var값을 원소로 집어넣는다.
	
	l.erase(liter); // iter값에 해당하는 list를 하나 지운다.
	
	l.clear(); // list 내부 전체를 지운다.
	
	l.size(); // list의 사이즈를 반환한다.
	
	l.sort(); // list의 내부에 sort 내장 되어있어 간편하게 사용 가능 list 내부의 원소들을 내림차순으로 정리한다.
	
	l.reverse(); // list 내부의 원소들을 뒤집는다. 내림차순 -> 오름차순
	

	vector<int> v;
	
	vector<int> v(5); // 크기 5의 벡터 배열을 만들어 0으로 채운다.
	
	vector<int> v(5, 1); // 크기 5의 백터 배열을 만들어 1로 채운다.
	
	vector<int> v = {1, 2}; // 벡터에 해당 원소를 채운다.

	v.push_back(var); // vector의 끝에 변수 var값을 원소로 집어넣는다.
	
	v.erase(v.begin()); // vector의 첫 원소를 제거한다.
	
	v.size(); // vector의 사이즈를 반환한다.
	
	v.assign(3, 2); // 3개의 2를 할당한다.
	
	v.assign(s.begin(), s.end()); // 컨테이너 s의 전 범위를 할당한다.
	
	v.unique(s.begin(), s.end()); // 중복을 뒤로 보낸다. 정렬 후 사용해야함.
	
	
	stack<int> st;
	
	st.push(var); // stack에 원소를 집어넣는다.
	
	st.pop(); // stack의 최상위 원소를 삭제한다.
	
	st.size(); // stack의 사이즈를 반환한다.
	
	st.empty(); // stack의 사이즈가 0이면 true를 반환한다.
	
	swqp(st1, st2); // 두 스택의 원소를 교환한다.
	

	array<int, 50> arr;

	deque<int> dq;
	
	

	priority_queue<int> pq; // priority_queue를 선언한다. 내림차순

	priority_queue<int, vector<int>, greater<int>> pq; // priority_queue를 선언한다. 오름차순
	
	pq.push(var); // 변수 var에 있는 값을 큐에 집어넣는다.
	
	pq.top(); // 큐의 최상위값을 반환한다.
	
	pq.pop(); // 큐의 최상위값을 삭제한다.
	
	pq.size(); // 큐의 원소 갯수를 반환한다.
	
	pq.empty(); // pq가 비었으면 1, 비어있지 않다면 0을 반환한다.
	
	
	multiset<int> ms; // 멀티셋 ms를 선언한다. 오름차순
	
	multiset<int, greater<int>> ms; // 멀티셋 ms를 선언한다. 내림차순
	
	set<int>::iterator iter; // multiset의 iter선언 iter을 통해 multiset의 반복자를 반환해 순환 할 때 사용한다.
	
	ms.insert(var); // 변수 var에 있는 값을 멀티셋에 집어넣는다.
	
	ms.erase(iter); // 해당되는 반복자의 원소를 지운다.
	
	ms.find(var); // 멀티셋 안에 변수 var에 해당하는 값이 있는지 찾는다.
	
	ms.count(var); // 원소 var의 갯수를 카운트한다.
	
	ms.lower_bound(var); // 원소 var가 시작하는 구간의 반복자를 반환한다. (맨 앞의 var의 반복자) 없으면 end반복자 반환
	
	ms.upper_bound(var); // 원소 var가 끝나는 구간의 반복자를 반환한다. (var의 다음 수의 반복자) 없으면 end반복자 반환
	
	
	#include <cmath>
	
	var = pow(3, 2); // 3의 2제곱을 구한다.
	
	var = sqrt(4); // 4의 제곱근을 구한다.
	
	
	#include <algorithm>
	
	sort(v.begin(), v.end()); // 배열 내부의 원소들을 오름차순으로 정리한다.
	
	sort(v.rbegin(), v.rend()); // vector의 경우 내부에 기능인 rbegin()을 이용하여 원소들을 내림차순으로 정리할 수 다.
	
	max(n, m); // n과 m을 비교해 더 큰 값을 반환한다.
	
	min(n, m); // n과 m을 비교해 더 작은 값을 반환한다.
	
	(*)max_element(v.begin(), v.end()); // 배열 내의 가장 큰 원소를 반환한다. 가끔 앞에 포인터를 달아줘야 할 때가 있다.
	
	min_element(v.begin(), v.end()); // 배열 내의 가장 작은 원소를 반환한다.
	
	find(v.begin(), v.end(), num); // 배열 안에 num의 위치를 반환해준다. 없을 경우 v.end()를 반환한다.
	
	find_if(v.begin(), v.end(), func); // 배열안에 찾는 조건에 맞는 숫자의 위 반환해준다. bool func함수로 따로 return해준다.
	
	count(v.begin(), v.end(), num); // 배열 안에 num이 몇개 있는지 반환해준다.
	
	count_if(v.begin(), v.end(), func); // 배열안에 찾는 조건에 맞는 숫자가 몇개있는지 반환해준다. bool func함수로 따로 return해준다.
	
	transform(v.begin(), v.end(), v.begin(), twice); // (시작, 마지막, 반환위치, 연산작업) 배열안의 숫자를 두배 올려준다.
	
	transform(s.begin(), s.end(), s.begin(), ::tolower); // 배열안의 함수를 소문자로 변환시켜준다.
	
	transform(v.begin(), v.end(), v.begin(), [](int n) { // 이같이 원하는 배열안에 원하는 작업을 실행할 수 있음.
		if (n >= 30) return n * 10;
		else return n;
		});
	
	
	#include <numeric>
	
	accumulate(v.begin(), v.end(), 0); // (,,합 전의 초깃값) 모든 원소의 합을 반환한다. 문자도 가능

	gcd(n,m); // n과 m의 최대 공약수를 반환한다.
	
	lcm(n,m); // n과 m의 최소 공배수를 반환한다.
	
	inner_product(v1.begin(), v1.end(), v2.begin(), 0); // 두 배열의 같은 위치의 값을 곱해 더한 총값을 반환한다.
	
	
	#include <cctype>
	
	toupper(s[i]); // 문자가 소문자인 경우 대문자로 바꿔준다. 아닐경우 그대로 반환
	
	tolower(s[i]); // 문자가 대문자인 경우 소문자로 바꿔준다. 아닐경우 그대로 반환
	
	isdigit(num); // num이 숫자면 1 아니면 0을 반환한다.
	
	isalpha(ch); // ch가 대문자면 1 소문자면 2 알파벳이 아니면 0을 반환한다. c++에서는 문자일경우 1024 아닐경우 그대로 반환
	
	
	#include <sstream>
	
	stringstream ss; // stringstream ss선언

	ss.str(""); // ss 초기화
	
	ss.str(s); // ss을 s로 초기화
	
	ss >> var; // ss에 있는 숫자를 공백이나 숫자가 아닌 부분까지 int형 변수 var로 가져온다.
	
	ss >> s; // ss에 있는 문자를 공백이나 문자가 아닌 부분까지 변수 s로 가져온다.
	
	
	#include <regex> // 정규식 공부를 따로 해보는게 좋겠다.
	
	s = regex_replace(s, regex("zero"), "0"); 문자열 s에서 "zero"로 지정된 것을 찾아 regex("zero") 0으로 바꾼다. regex_replace()
	
	
	bool cmp(vector<int> a, vector<int> b){ // cmp를 이용하여 sort
    		if(a[0] == b[0]) // 첫번째가 같으면
        		return a[1] < b[1]; // 두번째가 작은것부터
    		else
        		return a[0] > b[0]; // 같지 않은 경우 첫번째가 큰것 부터
	}

	return 0;
}
